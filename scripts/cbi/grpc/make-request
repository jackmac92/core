#!/usr/bin/env bash
set -euo pipefail

### parse args to relevant variables
SERVICE_NAME=${3:-$(s cbi svc select-dwim)}
proto_path=$(s cbi svc name-to-proto-path "$SERVICE_NAME")
proto_path=$(realpath $proto_path)
pkg_name=$(cat "$proto_path" | s cbi proto get-pkg-name-from-file)
ENDPOINT=${2:-$(s cbi proto pick-rpc "$proto_path")}

SVCSMUSHEDNAME=$(echo "$SERVICE_NAME" | tr -d '-')

SRC_PROTO_DIR=$(if test -d "$CBI_DEV_DIRECTORY/$SERVICE_NAME/.__proto_dont_modify__"; then echo "$CBI_DEV_DIRECTORY/$SERVICE_NAME/.__proto_dont_modify__"; else
    echo "Warning! falling back to cbi-site folder for __proto_dont_modify__" >/dev/stderr
    echo "$CBI_DEV_DIRECTORY/cbi-site/.__proto_dont_modify__"
fi)
SVC_CAMELCASE_NAME=$(echo "$SERVICE_NAME" | awk -F"-" '{for(i=1;i<=NF;i++){$i=toupper(substr($i,1,1)) substr($i,2)}} 1' OFS="")

generateRequestBody() {
    # while consuming_req_body
    # if dash input, read from stdin
    # if underscore, lookup request shape and open in vipe
    # FOR all: parse as json, if fails, reopen vipe with current input
    REQ_BODY_BASE="$1"
    if [ "$REQ_BODY_BASE" == "-" ]; then
        # read with 1 second timeout
        read -t 1 REQ_BODY
    elif [ "$REQ_BODY_BASE" == "_" ]; then
        reqmsg=$(s cbi proto describe-rpc "$proto_path" "$ENDPOINT" | head -n 1 | choose -f '\.' -1)
        REQ_BODY=$(s cbi proto create-json-template "$proto_path" "$reqmsg$" | vipe)
    else
        REQ_BODY=$REQ_BODY_BASE
    fi
    set +e
    echo "$REQ_BODY" | jq >/dev/null
    invalid_json=$?
    attempts=0
    while [[ $invalid_json -ne 0 ]] && [[ $attempts -lt 5 ]]; do
        REQ_BODY=$(echo "$REQ_BODY" | vipe)
        attempts=$(($attempts + 1))
        echo "$REQ_BODY" | jq >/dev/null
        invalid_json=$?
    done
    set -e

    echo "$REQ_BODY"
}

REQ_BODY=$(generateRequestBody ${1:-""})

if [ -z ${CBI_ENV_OVERRIDE:-""} ]; then
    # echo "Making request via local envoy" >/dev/stderr
    SERVER_ADDRESS=172.16.1.81:8888
else
    # echo "Overriding current environment" >/dev/stderr
    SERVER_ADDRESS=$(s cbi svc lookup-deployed-service-port "$SERVICE_NAME")
fi

USER_METADATA=""
ADMIN_METADATA=""
if [ -z ${CBI_OVERRIDE_METADATA_WITH_BASIC:-""} ]; then
    USER_METADATA=$(s cbi grpc gen-metadata)
    ADMIN_METADATA=$(jo idUser=$CBI_USER_ID email="$CBI_USER_EMAIL" firstName=$(git config user.name | awk '{ print $1 }') lastName=$(git config user.name | awk '{ print $2 }') pagePermissions=\{\})
    # ADMIN_METADATA=$(s cbi gen-grpc-metadata admin)
else
    USER_METADATA=$(jo idUser=$CBI_USER_ID email="$CBI_USER_EMAIL" features=\[\] package=\{\} userInfo=$(jo idUser=$CBI_USER_ID))
    ADMIN_METADATA=$(jo idUser=$CBI_USER_ID email="$CBI_USER_EMAIL" firstName=$(git config user.name | awk '{ print $1 }') lastName=$(git config user.name | awk '{ print $2 }') pagePermissions=\{\})
fi

REQ_PATH=$SVCSMUSHEDNAME.$SVC_CAMELCASE_NAME/$ENDPOINT

grpcurl \
    -plaintext \
    -import-path "$SRC_PROTO_DIR" \
    -proto "$SRC_PROTO_DIR/cbinsights/$SVCSMUSHEDNAME/$SVCSMUSHEDNAME.proto" \
    -H "grpcadminuserdata: $ADMIN_METADATA" \
    -H "grpcuserdata: $USER_METADATA" \
    -H "shouldDecodeMetadata: true" \
    -d "$REQ_BODY" \
    "$SERVER_ADDRESS" "$REQ_PATH"

# NOTE can be used to re-issue requests
CALL_HISTORY_DIR="$HOME/.local/run/grpccall/$(gdate +%s)"
mkdir -p "$CALL_HISTORY_DIR"
echo "$REQ_BODY" >>"$CALL_HISTORY_DIR/body"
echo "$REQ_PATH" >>"$CALL_HISTORY_DIR/path"
echo "$SERVICE_NAME" >>"$CALL_HISTORY_DIR/service"

REQ_CACHE_FILE="$HOME/.local/run/grpccall/$SERVICE_NAME/$REQ_PATH/$(gdate +%s)"
mkdir -p $(dirname "$REQ_CACHE_FILE")
echo "$REQ_BODY" > "$REQ_CACHE_FILE"
