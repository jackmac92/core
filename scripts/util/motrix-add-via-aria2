#!/usr/bin/env -S deno -A
import Aria2 from "npm:aria2";
import { parseArgs } from "jsr:@std/cli/parse-args";

const API_KEY = Deno.env.get("MOTRIX_JSON_RPC_APIKEY");
const API_PORT = Deno.env.get("MOTRIX_JSON_RPC_PORT") || 16800;

const flags = parseArgs(Deno.args, {
  boolean: ["await", "hideme"],
  default: { await: false, hideme: false },
});

export function validateUrl(value) {
  const urlPattern =
    /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i;
  return urlPattern.test(value);
}

export function historyToArray(historyMap) {
  return [...historyMap.values()]
    .sort((a, b) => b.startTime.localeCompare(a.startTime))
    .slice(0, 100);
}

export function parsePath(path) {
  const filename = path.replace(/^.*[\\/]/, "");
  const directory = path.match(/(.*)[/\\]/)?.[1] ?? "";

  return {
    dir: directory,
    out: filename,
  };
}
const pass = () => null;
const handleError = (error) => console.log(`Error: ${error}`);

async function onGot(downloadItem) {
  const secret = API_KEY;
  const port = API_PORT;
  const options = {
    host: "127.0.0.1",
    secure: false,
    path: "/jsonrpc",
    port,
    secret,
  };
  const aria2 = new Aria2(options);
  await aria2.open();

  let downloadUrl = "";
  if (validateUrl(downloadItem.finalUrl)) {
    downloadUrl = downloadItem.finalUrl;
  } else if (validateUrl(downloadItem.url)) {
    downloadUrl = downloadItem.url;
  } else {
    throw new Error("No valid finalUrl or url");
  }

  let params = {};
  if (downloadItem.filename) {
    params = {
      ...parsePath(downloadItem.filename),
    };
  }
  if (downloadItem.referrer) {
    params = {
      ...params,
      referer: downloadItem.referrer,
    };
  }
  if (downloadItem.cookies) {
    params = {
      ...params,
      header: `Cookie: ${downloadItem.cookies}`,
    };
  }

  if (flags.hideme) {
    console.log("Applying hide.me vpn for download");
    params = {
      ...params,
      "https-proxy": `http://${Deno.env.get("HIDE_ME_USERNAME")}:${Deno.env.get("HIDE_ME_PASSWORD")}@newyorkcity.hideservers.net:432`,
    };
  }

  await aria2
    .call("addUri", [downloadUrl], params)
    .then(async (gid) => {
      if (!flags.await) {
        setTimeout(() => {
          console.log("Download proceeding in background");
          Deno.exit(0);
        }, 2000);
      }
      aria2.on("onDownloadStop", async ([guid]) => {
        console.log("Download stopped");
      });

      aria2.on("onDownloadError", async ([guid]) => {
        console.log("Download fucked");
        Deno.exit(1);
      });

      aria2.on("onDownloadComplete", ([guid]) => {
        console.log("Download done");
        Deno.exit(0);
      });
    })
    .catch((err) => {
      console.log(`Error: ${err}`);
    });
}

// downloadItem.finalUrl
// downloadItem.url
// downloadItem.filename
// downloadItem.referrer
// downloadItem.cookies

await onGot({
  url: flags._[0],
  filename: flags._[1],
});

// Local Variables:
// mode: typescript-ts
// End:
