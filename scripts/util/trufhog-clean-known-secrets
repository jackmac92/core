#!/usr/bin/env bash
set -euo pipefail

#!/bin/bash

# Exit on any error
set -e

# Enable debug output
DEBUG=true

# Debug logging function
debug_log() {
    if [ "$DEBUG" = true ]; then
        echo >&2 "[DEBUG] $1"
    fi
}

usage() {
    echo >&2 "Usage: $0 <trufflehog_json_file>"
    echo >&2 "Takes a JSON file from trufflehog output and rewrites git history to remove secrets"
    exit 1
}

# Function to verify the JSON file
verify_json() {
    local json_file="$1"
    if [ ! -f "$json_file" ]; then
        echo >&2 "Error: JSON file not found: $json_file"
        exit 1
    }

    if ! jq empty "$json_file" 2>/dev/null; then
        echo >&2 "Error: Invalid JSON file"
        exit 1
    }
}

# Function to prepare git filter-repo command
clean_secrets() {
    local json_file="$1"
    local secrets=()
    local temp_script=$(mktemp)

    echo >&2 "Extracting secrets from Trufflehog results..."

    # Create Python script for git filter-repo
    cat > "$temp_script" << 'EOF'
import re
import sys
from git_filter_repo import Blob, FilteringOptions

patterns = []

def load_patterns():
    # Will be populated by sed below
    pass

def filter_content(blob):
    content = blob.data.decode('utf-8', errors='replace')
    original_content = content
    for pattern in patterns:
        content = content.replace(pattern, '[REMOVED]')
    if content != original_content:
        blob.data = content.encode('utf-8')

load_patterns()
filter = filter_content
EOF

    # Extract secrets and build pattern list
    echo >&2 "def load_patterns():" >> "$temp_script"
    echo >&2 "    global patterns" >> "$temp_script"
    echo >&2 "    patterns = [" >> "$temp_script"

    while IFS= read -r line; do
        if [ -n "$line" ]; then
            secret=$(echo >&2 "$line" | jq -r '.Raw')
            if [ "$secret" != "null" ] && [ -n "$secret" ]; then
                # Escape the secret for Python string literal
                escaped_secret=$(printf '%q' "$secret")
                masked=$(echo >&2 "$secret" | sed 's/\(.\{4\}\).*\(.\{4\}\)/\1****\2/g')
                debug_log "Found secret (masked): $masked"
                echo >&2 "        r'''$escaped_secret'''," >> "$temp_script"
                secrets+=("$secret")
            fi
        fi
    done < "$json_file"

    echo >&2 "    ]" >> "$temp_script"

    if [ ${#secrets[@]} -eq 0 ]; then
        echo >&2 "No secrets found in JSON file"
        rm -f "$temp_script"
        return 1
    fi

    echo >&2 "Found ${#secrets[@]} secrets to clean"
    echo >&2 "Preview of affected secrets (masked):"
    for secret in "${secrets[@]}"; do
        echo >&2 "- $(echo >&2 "$secret" | sed 's/\(.\{4\}\).*\(.\{4\}\)/\1****\2/g')"
    done

    read -p "Do you want to proceed with cleaning these secrets? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo >&2 "Cleaning secrets from git history..."

        # Ensure git-filter-repo is installed
        if ! python3 -c "import git_filter_repo" 2>/dev/null; then
            echo >&2 "Error: git-filter-repo Python package not found"
            echo >&2 "Please install it using: pip install git-filter-repo"
            rm -f "$temp_script"
            exit 1
        fi

        # Backup current state
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        echo >&2 "Creating backup branch: backup-$current_branch"
        git branch "backup-$current_branch"

        # Run git filter-repo
        debug_log "Running git filter-repo..."
        git filter-repo --force --python "$temp_script"

        if [ $? -eq 0 ]; then
            echo >&2 "Secrets successfully cleaned from git history"
            echo
            echo >&2 "Changes have been made to the repository. A backup branch 'backup-$current_branch' was created."
            echo >&2 "To complete the process:"
            echo >&2 "1. Review the changes"
            echo >&2 "2. If satisfied, force push with:"
            echo >&2 "   git push --force --all"
            echo >&2 "   git push --force --tags"
            echo >&2 "3. If not satisfied, restore from backup:"
            echo >&2 "   git reset --hard backup-$current_branch"

            read -p "Would you like to see the changes now? (y/n) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                echo >&2 "Showing diff of changes..."
                git diff "backup-$current_branch"
            fi
        else
            echo >&2 "Error: Failed to clean secrets from git history"
            echo >&2 "Restoring from backup..."
            git reset --hard "backup-$current_branch"
            rm -f "$temp_script"
            exit 1
        fi
    else
        echo >&2 "Operation cancelled"
        rm -f "$temp_script"
        exit 1
    fi

    # Cleanup
    rm -f "$temp_script"
}

# Main execution
main() {
    if [ $# -ne 1 ]; then
        usage
    fi

    local json_file="$1"

    # Check dependencies
    if ! command -v jq &> /dev/null; then
        echo >&2 "Error: jq is not installed (required for JSON parsing)"
        echo >&2 "Please install it using your package manager (e.g., apt install jq, brew install jq)"
        exit 1
    fi

    # Verify JSON file
    verify_json "$json_file"

    # Process and clean secrets
    clean_secrets "$json_file"

}

# Run the script with the provided JSON file
main "$@"
