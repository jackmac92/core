#!/usr/bin/env bash
set -euo pipefail

DEBUG=true

debug_log() {
    if [ "$DEBUG" = true ]; then
        echo "[DEBUG] $1"
    fi
}

usage() {
    echo "Usage: $0 <trufflehog_json_file>"
    echo "Takes a JSON file from trufflehog output (ndjson format) and lets you select secrets to clean"
    exit 1
}

# Get context lines from git history
get_git_context() {
    local commit="$1"
    local file="$2"
    local line_number="$3"
    local context_lines=1 # Number of lines before and after

    # Calculate line range for context
    local start=$((line_number - context_lines))
    local end=$((line_number + context_lines))
    [ "$start" -lt 1 ] && start=1

    # Get the content at that specific commit
    local output
    output=$(git show "$commit":"$file" 2>/dev/null |
        awk -v start="$start" -v end="$end" -v target="$line_number" '
             NR >= start && NR <= end {
                 if (NR == target) {
                     line_content = $0
                     printf "LINE_CONTENT=%s\n", $0
                 } else if (NR < target) {
                     printf "LINE_BEFORE=%s\n", $0
                 } else {
                     printf "LINE_AFTER=%s\n", $0
                 }
             }')

    echo "$output"
}

# Create a preview for a specific secret
generate_preview() {
    local json_file="$1"
    local masked_secret="$2"

    # Convert masked secret back to pattern for grep
    pattern=$(echo "$masked_secret" | sed 's/\*\*\*\*/.*/')

    # Find matching entry in NDJSON and format it
    while IFS= read -r line; do
        raw_value=$(echo "$line" | jq -r '.Raw')
        if [[ "$raw_value" =~ $pattern ]]; then
            # Extract git metadata
            commit=$(echo "$line" | jq -r '.SourceMetadata.Data.Git.commit')
            file=$(echo "$line" | jq -r '.SourceMetadata.Data.Git.file')
            line_num=$(echo "$line" | jq -r '.SourceMetadata.Data.Git.line')

            # Get context from git if we have valid metadata
            if [ "$commit" != "null" ] && [ "$file" != "null" ] && [ "$line_num" != "null" ]; then
                # Source the context lines into variables
                while IFS='=' read -r key value; do
                    case "$key" in
                    LINE_BEFORE) line_before="$value" ;;
                    LINE_CONTENT) line_content="$value" ;;
                    LINE_AFTER) line_after="$value" ;;
                    esac
                done < <(get_git_context "$commit" "$file" "$line_num")
            fi

            # Format the output with git context if available
            echo "$line" | jq -r --arg line_before "${line_before:-[no context]}" \
                --arg line_content "${line_content:-[no context]}" \
                --arg line_after "${line_after:-[no context]}" \
                '"Secret Type: \(.DetectorName)
File: \(.SourceMetadata.Data.Git.file)
Line: \(.SourceMetadata.Data.Git.line)
Commit: \(.SourceMetadata.Data.Git.commit)
Author: \(.SourceMetadata.Data.Git.author)
Date: \(.SourceMetadata.Data.Git.timestamp)
Blob: \(.Raw)

Context:
\($line_before)
>\($line_content)
\($line_after)"'
            break
        fi
    done <"$json_file"
}

clean_secrets() {
    local json_file="$1"
    local preview_script=$(mktemp)
    local ignore_script=$(mktemp)

    # Create preview script with git context function
    cat >"$preview_script" <<EOF
#!/bin/bash
masked_secret="\$1"
$(declare -f get_git_context)
$(declare -f generate_preview)
generate_preview "$json_file" "\$masked_secret"
EOF
    chmod +x "$preview_script"

    # Create ignore script
    cat >"$ignore_script" <<EOF
#!/bin/bash
masked_secret="\$1"
pattern=\$(echo "\$masked_secret" | sed 's/\*\*\*\*/.*/')
while IFS= read -r line; do
    raw_value=\$(echo "\$line" | jq -r '.Raw')
    if [[ "\$raw_value" =~ \$pattern ]]; then
        filename=\$(echo "\$line" | jq -r '.SourceMetadata.Data.Git.file')
        if [ -n "\$filename" ]; then
            echo "\$filename" >> ./.truffleignore
            echo "Added to ./.truffleignore: \$filename" >&2
        fi
        break
    fi
done < "$json_file"
EOF
    chmod +x "$ignore_script"

    # Run fzf with simplified bindings
    selected_secrets=$(jq -r '.Raw' "$json_file" |
        grep -v '^null$' |
        sort -u |
        sed 's/\(.\{4\}\).*\(.\{4\}\)/\1****\2/g' |
        fzf --multi \
            --height 80% \
            --preview-window=right:77% \
            --preview="$preview_script {}" \
            --header="Select secrets to clean (TAB to select, ENTER to confirm, Ctrl-i to ignore file)" \
            --bind="ctrl-a:select-all" \
            --bind="ctrl-d:deselect-all" \
            --bind="ctrl-i:execute($ignore_script {})" \
            --cycle)

    # Clean up scripts
    rm -f "$preview_script" "$ignore_script"

    if [ -z "$selected_secrets" ]; then
        echo "No secrets selected for cleaning"
        return 1
    fi

    # Convert selected masked secrets back to actual secrets
    rules_file=$(mktemp)
    while IFS= read -r masked_secret; do
        pattern=$(echo "$masked_secret" | sed 's/\*\*\*\*/.*/')
        while IFS= read -r line; do
            echo "$line" | jq -r --arg pattern "$pattern" 'select(.Raw | test($pattern)) | .Raw'
        done <"$json_file"
    done <<<"$selected_secrets" | sort -u | sed 's/^.*$/&==>[REMOVED]/' >"$rules_file"

    # Show selected secrets
    echo -e "\nSelected secrets to clean (masked):"
    echo "$selected_secrets" | sed 's/^/- /'

    read -p "Proceed with cleaning these secrets? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Backup current branch
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        echo "Creating backup branch: backup-$current_branch"
        git branch "backup-$current_branch"

        original_remote="$(git remote get-url origin)"
        # Run git filter-repo
        echo "Cleaning secrets from git history..."
        git filter-repo --force --replace-text "$rules_file"
        rm -f "$rules_file"
        git remote add origin "$original_remote"

        echo -e "\nSecrets cleaned. A backup branch 'backup-$current_branch' was created."
        echo "To complete the process:"
        echo "1. Review the changes:"
        echo "   git diff backup-$current_branch"
        echo "2. If satisfied:"
        echo "   git push --force --all"
        echo "   git push --force --tags"
        echo "3. If not satisfied:"
        echo "   git reset --hard backup-$current_branch"

        read -p "Would you like to see the changes now? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git diff "backup-$current_branch"
        fi
    else
        echo "Operation cancelled"
    fi
}

add_to_ignore() {
    local json_file="$1"
    local masked_secret="$2"

    # Get the filename from the JSON entry matching the masked secret
    local pattern=$(echo "$masked_secret" | sed 's/\*\*\*\*/.*/')
    local filename=$(while IFS= read -r line; do
        raw_value=$(echo "$line" | jq -r '.Raw')
        if [[ "$raw_value" =~ $pattern ]]; then
            echo "$line" | jq -r '.SourceMetadata.Data.Git.file'
            break
        fi
    done <"$json_file")

    if [ -n "$filename" ]; then
        echo "$filename" >>./.truffleignore
        echo "Added to ./.truffleignore: $filename"
    fi
}

main() {
    [ $# -ne 1 ] && usage

    local json_file="$1"

    # Check dependencies
    for cmd in jq fzf git; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            echo "Error: Required command not found: $cmd"
            exit 1
        fi
    done

    # Check for git-filter-repo
    if ! python3 -c "import git_filter_repo" 2>/dev/null; then
        echo "Error: git-filter-repo Python package not found"
        echo "Please install it using: pip install git-filter-repo"
        exit 1
    fi

    # Verify file exists and is valid ndjson
    if [ ! -f "$json_file" ]; then
        echo "Error: File not found: $json_file"
        exit 1
    fi

    if ! jq -c '.' "$json_file" >/dev/null 2>&1; then
        echo "Error: Invalid JSON/NDJSON file"
        exit 1
    fi

    clean_secrets "$json_file"
}

main "$@"
