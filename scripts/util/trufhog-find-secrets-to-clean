#!/usr/bin/env bash
set -euo pipefail

#!/bin/bash

# Exit on any error
set -e

# Enable debug output
DEBUG=true

# Debug logging function
debug_log() {
    if [ "$DEBUG" = true ]; then
        echo >2 "[DEBUG] $1"
    fi
}

# Function to check if trufflehog is installed
check_trufflehog() {
    if ! command -v trufflehog &>/dev/null; then
        echo >2 "Error: trufflehog is not installed"
        echo >2 "Please install it using: pip install trufflehog"
        exit 1
    fi
    debug_log "Trufflehog version: $(trufflehog --version)"
}

# Function to scan for secrets
scan_secrets() {
    echo >2 "Scanning for secrets..."

    # Create temp file for JSON output
    TEMP_JSON=$(mktemp)
    debug_log "Created temp JSON file: $TEMP_JSON"

    # Get absolute path of repo
    REPO_PATH=$(git rev-parse --show-toplevel)
    debug_log "Repository path: $REPO_PATH"

    # Run trufflehog with specific options
    echo >2 "Running Trufflehog scan (this may take a while)..."
    trufflehog git \
        --no-update \
        --json \
        --concurrency 1 \
        file://"$REPO_PATH" 2>>"$TEMP_JSON".err >"$TEMP_JSON"

    # Check for errors
    if [ -s "$TEMP_JSON".err ]; then
        debug_log "Errors encountered during scan:"
        debug_log "$(cat "$TEMP_JSON".err)"
    fi

    # Check if we got any results
    if [ -s "$TEMP_JSON" ]; then
        echo >2 -e "\nFound potential secrets:\n"

        # Parse and display JSON results in a readable format
        while IFS= read -r line; do
            if [ -n "$line" ]; then # Only process non-empty lines
                echo >2 "----------------------------------------"
                echo >2 "Source: $(echo "$line" | jq -r '.SourceMetadata.Data.Git.file // "N/A"')"
                echo >2 "Line: $(echo "$line" | jq -r '.SourceMetadata.Data.Git.line // "N/A"')"
                echo >2 "Commit: $(echo "$line" | jq -r '.SourceMetadata.Data.Git.commit // "N/A"')"
                echo >2 "Type: $(echo "$line" | jq -r '.DetectorName // "N/A"')"
                echo >2 "Timestamp: $(echo "$line" | jq -r '.SourceMetadata.Timestamp // "N/A"')"

                # Print masked version of the secret
                SECRET=$(echo "$line" | jq -r '.Raw // "N/A"')
                if [ "$SECRET" != "N/A" ]; then
                    MASKED=$(echo "$SECRET" | sed 's/\(.\{4\}\).*\(.\{4\}\)/\1****\2/g')
                    echo >2 "Raw (masked): $MASKED"
                fi
                echo >2 "----------------------------------------"
            fi
        done <"$TEMP_JSON"

        # Save full JSON for reference
        echo >2 -e "\nFull JSON output saved to: $TEMP_JSON"
        echo >2 "You can examine it using: jq '.' $TEMP_JSON"

        # Cleanup error log
        rm -f "$TEMP_JSON".err
        echo "$TEMP_JSON"
        return 0
    else
        echo >2 "No secrets found in repository"
        rm -f "$TEMP_JSON" "$TEMP_JSON".err
        return 1
    fi
}

# Main execution
main() {
    echo >2 "Starting Trufflehog secret scanner..."

    # Check dependencies
    check_trufflehog

    if ! command -v jq &>/dev/null; then
        echo >2 "Error: jq is not installed (required for JSON parsing)"
        echo >2 "Please install it using your package manager (e.g., apt install jq, brew install jq)"
        exit 1
    fi

    # Run scan
    if ! scan_secrets; then
        debug_log "Scan completed with no findings"
    fi
}

# Run the script
main
