#!/usr/bin/env bash
set -euo pipefail

python3 -c '
import glob
import sys
import os
import json

def distinct(lst):
    return list(set(lst))
def distinctify(obj, key):
    if obj is not None and key in obj:
        obj[key] = distinct(obj[key])

def deep_merge(dict1, dict2):
    """ Recursively merges dict2 into dict1. """
    for key in dict2:
        if key in dict1:
            if isinstance(dict1[key], dict) and isinstance(dict2[key], dict):
                deep_merge(dict1[key], dict2[key])
            elif isinstance(dict1[key], list) and isinstance(dict2[key], list):
                dict1[key].extend(dict2[key])
            else:
                dict1[key] = dict2[key]
        else:
            dict1[key] = dict2[key]
    return dict1

tgt = os.path.join(sys.argv[1], "*json")
ymlfiles = glob.glob(tgt)
objs = [json.load(open(i, "r")) for i in ymlfiles]
result = {}
for x in objs:
    result = deep_merge(result, x)
conf = result

for svcname in conf["services"]:
    svc = conf["services"][svcname]

    distinctify(svc, "networks")
    distinctify(svc.get("deploy"), "labels")

    img = svc.get("image", "")
    if not (img.startswith("jackzzz92") or img.startswith(f"""whales.{os.getenv("PRIMARY_PERSONAL_DOMAIN", "jackdmc.com")}""")):
        continue

    imgcomponents = img.split(":")
    if len(imgcomponents) > 1:
        continue

    build_id = os.environ.get("CI_PIPELINE_IID")
    if build_id is not None:
        svc["image"]+= ":" + build_id

with os.fdopen(sys.stdout.fileno(), "w", closefd=False) as stdout:
    json.dump(conf, stdout)
    stdout.flush()

' "${1:-"./"}"
