#!/usr/bin/env bash
set -euo pipefail

# Ensure the merge commit SHA is provided
if [[ -z $1 ]]; then
    echo "Usage: $0 <merge-commit-sha>"
    exit 1
fi

base_branch=${JM_GIT_CHECK_MAIN_BRANCH:-"master"}
input_sha=$1

echo $worktree_dir
echo $worktree_dir
echo $worktree_dir
mkdir -p $(dirname $diff_file)

# Find the common ancestor
target_sha=""
if s git is-merge-commit-p "$input_sha"; then
  target_sha=$(git merge-base $input_sha $base_branch)
else
  target_sha=$input_sha
fi

branch_name=temp-branch-$base_branch-$input_sha
worktree_dir="/tmp/git-wrktree/$branch_name"
diff_file="/tmp/git-result/diff-$base_branch-$input_sha--$target_sha.txt"


# Create a temporary branch from the common ancestor
git branch $branch_name $target_sha

if [[ -n "${JM_GIT_DANGLING_DIFF_CLEANUP:-""}" ]]; then
  trap "git branch -d $branch_name" EXIT
fi

# Create a new worktree and check out the temporary branch in it
git worktree add $worktree_dir $branch_name

if [[ -n "${JM_GIT_DANGLING_DIFF_CLEANUP:-""}" ]]; then
  trap "git worktree remove $worktree_dir" EXIT
fi

# Change to the new worktree directory
cd $worktree_dir

set +e
# Attempt to cherry-pick the merge commit
git cherry-pick --no-edit --allow-empty $input_sha
gcpexit=$?

if git status | grep -q "nothing to commit"; then
    git commit --allow-empty --no-edit
else
    if [ $gcpexit -eq 0 ]; then
        echo 1 > $diff_file
        exit 0
    fi
fi
set -e

# Diff the temporary branch against the base branch
git diff $base_branch > $diff_file

