#!/usr/bin/env bash
set -euo pipefail

# Ensure the merge commit SHA is provided
if [[ -z $1 ]]; then
    echo "Usage: $0 <merge-commit-sha>"
    exit 1
fi

base_branch=${JM_GIT_CHECK_MAIN_BRANCH:-"master"}
input_sha=$1
worktree_dir="/tmp/git-wrktree/temp-branch-$base_branch-$input_sha"
diff_file="/tmp/git-result/diff-$base_branch-$input_sha.txt"

echo $worktree_dir
echo $worktree_dir
echo $worktree_dir
mkdir -p $(dirname $diff_file)

target_sha=""
if s git is-merge-commit-p "$input_sha"; then
  target_sha=$(git merge-base $input_sha $base_branch)
else
  target_sha=$input_sha
fi

# Find the common ancestor

# Create a temporary branch from the common ancestor
git branch temp-branch-$base_branch-$input_sha $target_sha

trap "git branch -d temp-branch-$base_branch-$input_sha" EXIT

# Create a new worktree and check out the temporary branch in it
git worktree add $worktree_dir temp-branch-$base_branch-$input_sha

# Optionally, clean up the temporary worktree and branch
trap "git worktree remove $worktree_dir" EXIT

# Change to the new worktree directory
cd $worktree_dir

echo "STARTING CHERRY PICK"
set +e
# Attempt to cherry-pick the merge commit
git cherry-pick --no-edit $input_sha
if [ $? -eq 0 ]; then
    if git status | grep -q "nothing to commit"; then
        echo 0 > $diff_file
        exit 0
    fi
else
    echo 1 > $diff_file
    exit 0
fi
set -e
echo "DONE CHERRY PICK"

# Diff the temporary branch against the base branch
git diff $base_branch > $diff_file

exit 0
