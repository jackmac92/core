#!/usr/bin/env bash
set -euo pipefail

tgt="${PWD##*/}"

if [[ $(uname) = "Linux" ]]; then
    EXTERNAL_EXTS=/usr/share/google-chrome/extensions/
elif [[ $(uname) = "Darwin" ]]; then
    EXTERNAL_EXTS=$HOME/Library/Application\ Support/Chromium/External\ Extensions/
else
    echo "Unsupported OS"
    exit 1
fi

echo "Installing subfolder $tgt as a crx"

npm run build
pnpm run pack

existing_id=$(curl --header "PRIVATE-TOKEN: $LAB_CORE_TOKEN" "https://gitlab.com/api/v4/projects/$(s gitlab get-url-encoded-project-name-from-remote)/secure_files" | jq 'select(.[].name == "key.pem") | first | .id')
if [[ -n "${existing_id:-""}" ]]; then
    curl --request DELETE --header "PRIVATE-TOKEN: $LAB_CORE_TOKEN" "https://gitlab.com/api/v4/projects/$(s gitlab get-url-encoded-project-name-from-remote)/secure_files/$existing_id"
fi

curl --request POST --header "PRIVATE-TOKEN: $LAB_CORE_TOKEN" "https://gitlab.com/api/v4/projects/$(s gitlab get-url-encoded-project-name-from-remote)/secure_files" --form "name=key.pem" --form "file=@./build/key.pem"

extid="$(s web-ext get-ext-id-from-pem build/key.pem)"

# COULDDO: since I need to store key.pem as gitlab ci var, I could rely on s gitlab envrc to have synced the key.pem, and then use the gitlab helper to derive the extension id from the key.pem
s web-ext generate-preinstall-json "$tgt" | tee $EXTERNAL_EXTS/$extid.json
