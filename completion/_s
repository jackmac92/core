#compdef s
S_SCRIPT_PASSTHRU_CMDS=(cat which whicha mkhelp new edit delete debug rename duplicate)
S_SCRIPT_IGNORED_DIRNAMES=(goss.d)

# Cache policy function - invalidate cache if any files in directories have changed
_s_cache_policy() {
  local -a cached_paths
  # Get modification time of all script directories
  for dir in ${(s.:.)SCRIPTS_PATH}; do
    cached_paths=($cached_paths "$dir"/*(-*,/))
  done
  # -nt checks if files are newer than cache
  for file in $cached_paths; do
    [[ "$file" -nt "$1" ]] && return 0
  done
  return 1
}

function __list_commands {
  local -a subcmds
  local line dir next cache_id
  dir="$1"

  # Setup caching
  local cache_policy
  zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
  if [[ -z "$cache_policy" ]]; then
    zstyle ":completion:${curcontext}:" cache-policy _s_cache_policy
  fi

  # Generate cache ID based on directory
  cache_id="s_complete_${dir:t}"

  # Try to retrieve from cache first
  if _cache_invalid "$cache_id" || ! _retrieve_cache "$cache_id"; then
    # Cache miss or invalid - generate completions
    [[ -d "$dir" && -r "$dir" ]] || return 1

    for file in "$dir"/*(-*,/); do
      [[ -e "$file" ]] || continue

      command=${file:t}
      [[ -n "$command" ]] || continue
      (($S_SCRIPT_IGNORED_DIRNAMES[(Ie)$command])) && continue

      if [[ -d "$file" ]]; then
        help="$command commands"
      else
        if [[ -f "$file.help" ]]; then
          read -r help < "$file.help" || help="No help available"
        else
          help=$(sed -nE -e '/^#!/d' -e '/^#/{s/^# *//; p; q;}' "$file" 2>/dev/null || echo "No description")
        fi
      fi

      help=${help//\"/\\\"}
      subcmds+=("$command:\"$help\"")
    done

    # Store in cache
    _store_cache "$cache_id" subcmds
  fi

  # Process completions
  if (( ${#subcmds} > 0 )); then
    _arguments -C ": :(($subcmds))" "*::arg:->args"
  fi

  # Handle nested completions
  if [[ -n "$line[1]" ]]; then
    if (($S_SCRIPT_PASSTHRU_CMDS[(Ie)$line[1]])); then
      next="$dir"
    else
      next="$dir/$line[1]"
    fi

    [[ -d "$next" ]] && __list_commands "$next"
  else
    _files
  fi
}

# Only process if SCRIPTS_PATH is set
[[ -n "$SCRIPTS_PATH" ]] && for i in ${(s.:.)SCRIPTS_PATH}; do
  __list_commands "$i"
done
